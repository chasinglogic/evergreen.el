* evergreen.el -- Interact with Evergreen via Emacs
  
  The Evergreen CLI has a lot of cool features that I rarely remember
  to use and trying remember the exact incantation / build
  variants that I want is always requires cross-referencing the
  evergreen.yml at minimum 5 times.
  
  So I spent some time to write up this Emacs interaction package. It
  uses the Evergreen CLI to expose a better UI for submitting patches
  and other Evergreen stuff too.
  
** Features

   - Fuzzy completion of projects, tasks, variants, and aliases when creating a patch build.
   - Exposes most useful boolean flags as yes or no prompts.
   - Can generate automatic patch descriptions
   - Very configurable via customize, many things can be defaulted to avoid prompts

** Installation
   
   The easiest installation method is [[https://framagit.org/steckerhalter/quelpa][quelpa]] to install direct from
   the git repository. Follow their installation instructions then you
   can add the following to your emacs init file to install
   evergreen.el:

   #+BEGIN_SRC emacs-lisp
   (quelpa '(evergreen :repo "chasinglogic/evergreen.el" :fetcher github))
   #+END_SRC
   
   Alternatively you can install directly using git. First clone this
   repository to your local machine (update the path as necessary):

   #+BEGIN_SRC bash
   $ git clone https://github.com/chasinglogic/evergreen.el ~/.evergreen.el
   #+END_SRC
   
   Now add the following line to your Emacs init file:

   #+BEGIN_SRC emacs-lisp
   (load-file "~/.evergreen.el/evergreen.el")
   #+END_SRC
   
** Usage

*** Managing Spawn Hosts
    
    evergreen.el provides an integrated experience with Evergreen
    Spawn hosts.
    
    To list your current spawn hosts you can do so via the command
    =M-x evergreen-list-spawn-hosts <RET>=. This will open up the
    Evergreen Spawn Host menu buffer.
    
    
    [[https://raw.githubusercontent.com/evergreen-ci/evergreen.el/master/screenshots/empty_spawn_host_list.png]]
    
    You can see that there is a "Spawn Host" button, if you click on
    or press =<RET>= while the cursor is over this button you will be
    interactively prompted to create a spawn host. You will receive a
    fuzzy searchable list of available distros:

    [[https://raw.githubusercontent.com/evergreen-ci/evergreen.el/master/screenshots/spawning_host.png]]
    
    Once the host has started spawning you can call =M-x revert-buffer
    <RET>= inside the Spawn Host menu buffer to update it like any
    other buffer in Emacs:
    
    [[https://raw.githubusercontent.com/evergreen-ci/evergreen.el/master/screenshots/host_provisioning.png]]
    
    Note that the Spawn Host id is highlighted as a button. If you
    press =<RET>= with the cursor on the ID or simply click it Emacs
    will remote into the spawn host using [[https://www.emacswiki.org/emacs/TrampMode][TRAMP mode]]:
    
    
    [[https://raw.githubusercontent.com/evergreen-ci/evergreen.el/master/screenshots/host_opened_in_emacs.png]]
    
    Important! Tramp can hang weirdly if you are connecting to a host
    for the first time (due to host key checking prompts it doesn't
    always forward correctly). For a smooth experience with AWS
    instances, which spawn hosts are, I recommend adding the following
    to your =~/.ssh/config= file:
    
    #+BEGIN_SRC text
    Host ec2-*
        StrictHostKeyChecking no
    #+END_SRC
    
    You can use the Terminate button in this buffer just like the
    Spawn Host button to, you guessed it, terminate the host.

*** Submitting Patch Builds
    
   evergreen.el allows you to submit patch builds via the command =M-x
   evergreen-patch <RET>= when visiting any file in the repository you
   wanna patch against.
   
   You will then be prompted for all required information to run a
   patch build. All information that requires knowledge of the
   =evergreen.yml= or information Evergreen provides via the
   =evergreen list= command will be presented as a fuzzy searchable
   completion list. If you have [[https://github.com/emacs-helm/helm][helm]], [[https://github.com/abo-abo/swiper][ivy]], or =ido= completion turned
   on it will use those packages.
   
   See [[Configuration]] below for information about available options and
   avoiding unnecessary prompts.
   
*** Configuration
    
    This is best effort customization documentation. The best way to
    discover available options for your installed version is always
    via =M-x customize-group <RET> evergreen <RET>=.
    
**** evergreen-spawn-key-name
     
     The key pair name to use when spawning a host. Will be prompted
     for when this is not set.
  
**** evergreen-projects
     
     List of evergreen projects used for completion in evergreen.el
     commands.  Defaults to the result of =evergreen list --projects=.
  
**** evergreen-default-project
     
     When prompting for project completion select the item matching
     this first. If it is nil and projectile is installed then the
     default selection will be the result of
     =(projectile-project-name)=. This works for most projects besides
     =mongodb/mongo=. If you want automatic defaulting to the correct
     =mongodb/mongo= branch then add the following to your emacs init
     file.
     
     #+BEGIN_SRC emacs-lisp
     (defun my-find-file-hook ()
       "Set evergreen-default-project appropriately for mongodb mongo."
       (when (eq (projectile-project-name "mongo"))
         (setq-local evergreen-default-project (format "mongodb-mongo-%s" (evergreen--branch-name)))))
     #+END_SRC
     
     This will set evergreen-default-project to the right value
     whenever you open a file in the mongo project. It will not update
     when switching branches and visiting a file that was open before
     checking out the new branch.
  
**** evergreen-default-alias
     
     When prompting for alias completion select the item matching
     this first.
  
**** evergreen-command-output-buffer
     
     Buffer to output evergreen stdout to. Defaults to ="*evergreen command output*"=.
  
**** evergreen-binary-path evergreen
     
     Location of evergreen binary, assumes evergreen is in your $PATH.
  
**** evergreen-assume-yes
     
     If not nil then the Evergreen CLI will not do any additional prompting.
  
**** evergreen-browse-when-patching
     
     Whether or not to open a patch in your browser after creation.
  
**** evergreen-finalize-when-patching
     
     If not nil schedule every patch right away.
  
**** evergreen-never-finalize-when-patching
     
     If not nil never finalize and do not prompt for finalize when
     patching.  This option is ignored if
     =evergreen-finalize-when-patching= is non-nil.
  
**** evergreen-browse-when-patching
     
     If not nil always open new patches in your web browser after submitting.
  
**** evergreen-never-browse-when-patching
     
     If not nil never browse and do not prompt for browse when patching.
     This option is ignored if =evergreen-browse-when-patching= is
     non-nil.
  
**** evergreen-generate-description
     
     If not nil generates patch descriptions of form =$git_branch_name: $git_head_commit_msg=.
   
*** Example Configuration
    
    This is my configuration as it provides minimum prompts and
    maximum automation. Put this in your Emacs init file after loading
    evergreen.el:
    
    #+BEGIN_SRC emacs-lisp
    (setq 
      evergreen-spawn-key-name "mykeypair"
      evergreen-generate-description t
      evergreen-finalize-when-patching t
      evergreen-browse-when-patching t
      evergreen-assume-yes t)
    #+END_SRC
    
    If you only work on a known set of projects and don't want the
    full list of evergreen projects everytime then set the
    =evergreen-projects= variable to shorten the list.
    
    #+BEGIN_SRC emacs-lisp
    (setq evergreen-projects '("mongodb-mongo-master" "toolchain-builder" "mongodb-mongo-v3.6" "mongodb-mongo-v4.0")
          evergreen-default-project "mongodb-mongo-master")
    #+END_SRC

** License

   =evergreen.el= is licensed under the GPLv3... because Emacs.
   
   #+BEGIN_SRC text
   evergreen.el -- Interact with Evergreen via Emacs
   Copyright (C) 2019  Mathew Robinson

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.
   #+END_SRC

